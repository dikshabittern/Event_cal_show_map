<div class ="container">
<div id="map-canvas-left"></div>
<div id="map-canvas-right"></div>
<link href="http://code.jquery.com/ui/1.10.2/themes/smoothness/jquery-ui.css" rel="Stylesheet"></link>

<%= form_with(model: event, local: true) do |form| %>
  <% if event.errors.any? %>
    <div id="error_explanation">
      <h2><%= pluralize(event.errors.count, "error") %> prohibited this event from being saved:</h2>

      <ul>
      <% event.errors.full_messages.each do |message| %>
        <li><%= message %></li>
      <% end %>
      </ul>
    </div>
  <% end %>
  <%= form.hidden_field :latitude, id: "location_latitude" %>
    <%= form.hidden_field :longitude, id: "location_longitude" %>
  <div class="field">
    <%= form.label :title %>
    <%= form.text_field :title, :class=>'form-control'  %>
  </div>

  <div class="field">
    <%= form.label :description %>
    <%= form.text_area :description, :class=>'form-control'  %>
  </div>

  <div class="field">
    <%= form.label :Category%>
    <%#= form.select :category_id, Category.all.map {|c| [ c.category_name]}, {promt:"Select"},:class=>'form-control'  %>
    <%= form.collection_select :category_id, Category.all, :id, :category_name,{}, {:class=>"form-control col-md-8"} %>
  </div>
  <div class="field">
    <%= form.label :start_date, id: "datepicker" %>
    <%#= form.text_field :start_date, id: "datepicker" %>
    <%= form.text_field :start_date, :class=>'form-control myDatePicker', autocomplete: :off %>
  </div>
  <div class="field">
    <%= form.label :end_date %>
    <%#= form.text_field :end_date, id: "datepicker2" %>
    <%= form.text_field :end_date, :class=>'form-control myDatePicker', autocomplete: :off %>
  </div>
  <div id="locationField">
      <input id="autocomplete" name="event[address]" placeholder="Enter your address" />
  </div>

    <!-- Note: The address components in this sample are typical. You might need to adjust them for
               the locations relevant to your app. For more information, see
         https://developers.google.com/maps/documentation/javascript/examples/places-autocomplete-addressform
    -->

    <table id="address">
      <!-- <tr>
        <td class="label">Street address</td>
        <td class="slimField"><input class="field" id="street_number"  type="text" /></td>
        <td class="wideField" colspan="2"><input class="field" id="route"  type="text" disabled="true"/></td>
      </tr> -->

      <tr>
        <td class="label">City</td>
        <td class="wideField" colspan="3">
          <!-- <input type="text" name="event[city]" class="field" id="locality" value="" /> -->
          <%= form.text_field :city, class: "field", id: "locality" %>
         </td>
      </tr>
      <tr>
        <td class="label">State</td>
        <td class="slimField">
          <%= form.text_field :state, class: "field", id: "state" %>
          <!-- <input type="text" name="event[state]" class="field" id="state"  value=""  /> -->
        </td>
      </tr>
      <tr>
        <td class="label">Zip code</td>
        <td class="wideField">
          <%= form.text_field :zip_code, class: "field", id: "zipcode" %>
          <!-- <input type="text" name="event[zip_code]" class="field" id="zipcode"  value=""  /> -->
        </td>
      </tr>
      <tr>
        <td class="label">Country</td>
        <td class="wideField" colspan="3">
        <%= form.text_field :country, class: "field", id: "address_line" %>

        <!-- <input name="event[country]" class="field" id="address_line" /></td> -->
      </tr>


    </table>

  <div class="actions">
    <%= form.submit %>
  </div>
<% end %>




<script src="http://maps.googleapis.com/maps/api/js?key=AIzaSyAvuPSxdugPS2FJQibo-i78wVZHWgmKemk&libraries=places"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/geocomplete/1.7.0/jquery.geocomplete.js"></script>


<script type="text/javascript">
$("#autocomplete").geocomplete()
          .bind("geocode:result", function(event, result){
            b = result
            a = result.address_components
            for ( var i = 0, l = a.length; i < l; i++ ) {
                if (a[i].types.indexOf('administrative_area_level_2') > -1)
                {
                  $('#locality').val(a[i].long_name)
                }
                if (a[i].types.indexOf("country") > -1)
                {
                  $('#address_line').val(a[i].long_name)
                }
                if (a[i].types.indexOf("postal_code") > -1)
                {
                  $('#zipcode').val(a[i].long_name)
                }
                if (a[i].types.indexOf('administrative_area_level_1') > -1)
                {
                  $('#state').val(a[i].long_name)
                }
            }

            console.log("Data", result);
            // $("#state").val(a[3].long_name)
            $("#location_latitude").val(result.geometry.viewport.na.j)
            $("#location_longitude").val(result.geometry.viewport.ga.l)


          });
          // *
// * Two maps on the same page
// * 2015 - en.marnoto.com
// *

// necessary variables
var mapLeft, mapRight;
var infoWindowLeft, infoWindowRight;

// markersData variable stores the information necessary to each marker
var markersDataLeft = [
   {
      lat: 28.5847,
      lng: 77.3159,
      name: "Bitterntec company",
      address1:"sector 2 B41",
      address2: "Metro station 15 near",
      postalCode: "201301 Noida sector 2" // don't insert comma in the last item of each marker
   },
   {
      lat: 28.6366,
      lng: 77.2868,
      name: "nirman vihar",
      address1:"nirman vihar Metro station",
      address2: "nirman vihar sakarpura",
      postalCode: "110092 Nirman vihar" // don't insert comma in the last item of each marker
   },
   {
      lat: 25.9084,
      lng: 78.5634,
      name: "indergarh",
      address1:"indergarh ward no.9 ",
      address2: "maa rajrajeshwari",
      postalCode: "475675 indergarh" // don't insert comma in the last item of each marker
   } // don't insert comma in the last item
];



function initialize(setMap) {

   var mapOptions;
   
   if(setMap == "mapLeft") {
      mapOptions = {
         center: new google.maps.LatLng(28.7041,77.1025),
         zoom: 11,
         mapTypeId: 'roadmap',
      };
   
      mapLeft = new google.maps.Map(document.getElementById('map-canvas-left'), mapOptions);
      
     // a new Info Window is created
     infoWindowLeft = new google.maps.InfoWindow();
  
     // Event that closes the Info Window with a click on the map
     google.maps.event.addListener(mapLeft, 'click', function() {
        infoWindowLeft.close();
    });
      
   } else {
      
      mapOptions = {
         center: new google.maps.LatLng(28.7041,77.1025),
         zoom: 9,
         mapTypeId: 'roadmap',
      };
      
     mapRight = new google.maps.Map(document.getElementById('map-canvas-right'), mapOptions);
      
     // a new Info Window is created
     infoWindowRight = new google.maps.InfoWindow();
  
     // Event that closes the Info Window with a click on the map
     google.maps.event.addListener(mapRight, 'click', function() {
        infoWindowRight.close();
    });
   }

   // Finally displayMarkers() function is called to begin the markers creation
   displayMarkers(setMap);
   
   // Create second map only when initialize function is called for the first time.
   // Second time setMap is equal to mapRight, so this condition returns false and it will not run  
   if(setMap == "mapLeft"){
      initialize("mapRight");   
   }
   
}
google.maps.event.addDomListener(window, 'load', function(){ initialize("mapLeft") });


// This function will iterate over markersData array
// creating markers with createMarker function
function displayMarkers(setMap){
   
   var markersData;
   var map;
   
   if(setMap == "mapLeft"){
      markersData = markersDataLeft;
      map = mapLeft;
   } 
   
   // this variable sets the map bounds according to markers position
   var bounds = new google.maps.LatLngBounds();
   
   // for loop traverses markersData array calling createMarker function for each marker 
   for (var i = 0; i < markersData.length; i++){

      var latlng = new google.maps.LatLng(markersData[i].lat, markersData[i].lng);
      var name = markersData[i].name;
      var address1 = markersData[i].address1;
      var address2 = markersData[i].address2;
      var postalCode = markersData[i].postalCode;

      createMarker(setMap, latlng, name, address1, address2, postalCode);

      // marker position is added to bounds variable
      bounds.extend(latlng);  
   }

   // Finally the bounds variable is used to set the map bounds
   // with fitBounds() function
   map.fitBounds(bounds);
}

// This function creates each marker and it sets their Info Window content
function createMarker(setMap, latlng, name, address1, address2, postalCode){
   
   var map;
   var infoWindow;
   
   if(setMap == "mapLeft"){
      map = mapLeft;
      infoWindow = infoWindowLeft;
   } else {
      map = mapRight;
      infoWindow = infoWindowRight;
   }
   
   var marker = new google.maps.Marker({
      map: map,
      position: latlng,
      title: name
   });

   // This event expects a click on a marker
   // When this event is fired the Info Window content is created
   // and the Info Window is opened.
   google.maps.event.addListener(marker, 'click', function() {
      
      // Creating the content to be inserted in the infowindow
      var iwContent = '<div id="iw_container">' +
            '<div class="iw_title">' + name + '</div>' +
         '<div class="iw_content">' + address1 + '<br />' +
         address2 + '<br />' +
         postalCode + '</div></div>';
      
      // including content to the Info Window.
      infoWindow.setContent(iwContent);

      // opening the Info Window in the current map and at the current marker location.
      infoWindow.open(map, marker);
   });
}

</script>
<script type="text/javascript">
   $(document).ready(function(){
      $('.myDatePicker').datepicker({
        format: 'yyyy/mm/dd',
        autoclose: true
      });
    });
</script>